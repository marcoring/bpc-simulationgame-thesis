{"remainingRequest":"/Users/marco.ring/Desktop/BA/bpc-simulationgame-thesis/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/marco.ring/Desktop/BA/bpc-simulationgame-thesis/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/marco.ring/Desktop/BA/bpc-simulationgame-thesis/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/marco.ring/Desktop/BA/bpc-simulationgame-thesis/src/views/BikeConstruction.vue?vue&type=template&id=73b3968c&","dependencies":[{"path":"/Users/marco.ring/Desktop/BA/bpc-simulationgame-thesis/src/views/BikeConstruction.vue","mtime":1639360475509},{"path":"/Users/marco.ring/Desktop/BA/bpc-simulationgame-thesis/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/marco.ring/Desktop/BA/bpc-simulationgame-thesis/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/marco.ring/Desktop/BA/bpc-simulationgame-thesis/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/marco.ring/Desktop/BA/bpc-simulationgame-thesis/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}